40.	Combination Sum II
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.
Each number in C may only be used once in the combination.

helper(res, list, candidates, target-candidates[i], i+1);
将 candidate 的范围往前推一格，这样避免再次选用用过的 number。

public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        helper(res, new ArrayList<Integer>(), candidates, target, 0);
        return res;
    }
    public void helper(List<List<Integer>> res, List<Integer> list, int[] candidates, int target, int pos){
        if(target>0){
            for(int i=pos; i<candidates.length; i++){
                if(i>pos&&candidates[i]==candidates[i-1])continue;
                list.add(candidates[i]);
                helper(res, list, candidates, target-candidates[i], i+1);
                list.remove(list.size()-1);
            }
        }else if(target==0){
            res.add(new ArrayList<Integer>(list));
        }
    }
}
