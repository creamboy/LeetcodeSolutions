98.	Validate Binary Search Tree
Assume a BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees.

Top-down Recursion: Time ~ O(N), Space ~ O(logN)
用low和high两个变量所谓一个subtree的上下限：low <= subtree中所有元素 <= high
low <= leftSubTree <= parent : valid(x.left, low, x.val);
parent <= rightSubTree <= high : valid(x.right, x.val, high);

public class Solution {
    public boolean isValidBST(TreeNode root) {
        return helper(root, Integer.MAX_VALUE, Integer.MIN_VALUE);
    }
    public boolean helper(TreeNode root, long max, long min){
        if(root==null) return true;
        if(root.val>max ||root.val<min) return false;
        return helper(root.left,  (long)root.val-1, min) && helper(root.right, max, (long)root.val+1);
    }
}
