188.	Best Time to Buy and Sell Stock IV
k transactions

Solution: 2-d DP, Time ~ O(N^2)
Let d(i, j) be the max profit of i transactions in [0, j] (1 <= i <= k, 0 <= j <= N - 1).
Two case:
There is no sell at j: d(i, j) = d(i, j - 1)
There is a sell at j (there must be a buy at l < j): d(i, j) = max_{0 <= l < j} {d(i - 1, l - 1) - p[l] + p[j]}
d(i, j) = max{d(i, j - 1), max_{1 <= l <= j} {d(i - 1, l - 1) - p[l] + p[j]}}
         = max{d(i, j - 1), p[j] + max_{1 <= l <= j} {d(i - 1, l - 1) - p[l]}} // move p[j] out of max
profit_max = d[k][N - 1]
注意：
int[][] d = new int[k + 1][N]
如果 k 超过数组的一半（k > len / 2），即为as many transactions as you like的case，可简化。


    public int maxProfit(int k, int[] prices) {
        int len = prices.length;
        int profit = 0;

        // as many transactions as we want
        if (k > len / 2) {
            for (int i = 0; i < len - 1; i++) {
                int diff = prices[i + 1] - prices[i];
                if (diff > 0)   profit += diff;
            }
            return profit;
        }

        // at most k transactions
        // d(i, j) = max{d(i, j - 1), max_{1<=l<=j} {d(i - 1, l - 1) - p[l] (buy) + p[j] (sell)}}
        int[][] d = new int[k + 1][len];
        for (int i = 1; i <= k; i++) {
            int tmpMax = d[i - 1][0] - prices[0];
            for (int j = 1; j < len; j++) {
                tmpMax = Math.max(tmpMax, d[i - 1][j - 1] - prices[j]);
                d[i][j] = Math.max(d[i][j - 1], prices[j] + tmpMax);
            }
        }
        return d[k][len - 1];
    }