212 Find all words on the board that matches dictionary
Given a 2D board and a list of words from the dictionary, find all words in the board.
Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.
For example,
Given words = ["oath","pea","eat","rain"] and board =
[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
Return ["eat","oath"].
Note:
You may assume that all inputs are consist of lowercase letters a-z.
Hint:
You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier?
If the current candidate does not exist in all words' prefix, you could stop backtracking immediately. What kind of data structure could answer such query efficiently? Does a hash table work? Why or why not? How about a Trie? If you would like to learn how to implement a basic trie, please work on this problem: Implement Trie (Prefix Tree) first.

Solution

DFS + Trie: Time ~ O(?), Space ~ O(?)
此题是 Boggle Game 的一种（这里只能上下左右，不能斜角走），因为需要对每一个格点进行 DFS，所以必须用有效的 pruning 实现 backtracking 来提高速度，否则程序无法通过 large datasets。
解决方法：将 dictionary 中所有的 word 存放在 Trie 中，在 DFS 中搜索到当前的 path 可以看成一个 prefix，dictionary 中不存在这样的 prefix 即停止搜索。
private static final int R = 26; // lowercase letter a to z
private Node root;    

// R-way trie node
private static class Node {
    private String val;
    private Node[] next = new Node[R];
}

// insert key-value pair into trie
private void insert(String key, String val) {
    root = put(root, key, val, 0);
}

private Node put(Node x, String key, String val, int d) {
    Node xCopy = x;
    if (xCopy == null)  xCopy = new Node();
    if (d == key.length()) {
        xCopy.val = val;
        return xCopy;
    }
    int c = key.charAt(d) - 'a';
    xCopy.next[c] = put(xCopy.next[c], key, val, d + 1);
    return xCopy;
}

public List<String> findWords(char[][] board, String[] words) {
    List<String> list = new ArrayList<>();
    int M = board.length;
    if (M == 0) return list;
    int N = board[0].length;
    
    // convert dictionary to a trie
    int dictSize = words.length;
    if (dictSize == 0) return list;
    for (int i = 0; i < dictSize; i++) {
        String word = words[i];
        insert(word, word);
    }
            
    // use DFS to search all valide words
    boolean[][] visited = new boolean[M][N];
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            char letter = board[i][j];
            int c = letter - 'a';
            dfs(board, visited, i, j, root.next[c], list);
        }
    }
    
    // sort the list
    Collections.sort(list);
    return list;
}

// DFS
private void dfs(char[][] board, boolean[][] visited, int i, int j, Node x, List<String> list) {
    if (x == null)  return;
    if (x.val != null && !list.contains(x.val)) {
        list.add(x.val);
    }
    visited[i][j] = true;
    if (i > 0 && !visited[i - 1][j])                    // up
        dfs(board, visited, i - 1, j, x.next[board[i - 1][j] - 'a'], list);
    if (i < board.length - 1 && !visited[i + 1][j])     // down
        dfs(board, visited, i + 1, j, x.next[board[i + 1][j] - 'a'], list);
    if (j > 0 && !visited[i][j - 1])                    // left
        dfs(board, visited, i, j - 1, x.next[board[i][j - 1] - 'a'], list);
    if (j < board[0].length - 1 && !visited[i][j + 1])  // right
        dfs(board, visited, i, j + 1, x.next[board[i][j + 1] - 'a'], list);        
    visited[i][j] = false;
}
