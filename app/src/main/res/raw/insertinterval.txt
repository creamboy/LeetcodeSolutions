57.	Insert Interval
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary). You may assume that the intervals were initially sorted according to their start times. Example 1: Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9]. Example 2: Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16]. This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

给定条件原集合已经 sort 过，可以将 newInterval 和 List<Interval> intervals 里的所有元素逐个比较，有三种情况:
newInterval.end < interval.start：在 interval 之前插入 newInterval；
newInterval.start > interval.end：newInterval 肯定在 interval 之后，保留该 interval，继续比较下一个 interval；
newInterval 的任一端在 interval 中（有重叠）：更新 newInterval 的两端，并跳过该 interval。

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> res=new ArrayList<Interval>();
        for(Interval i : intervals){
            if(i.end < newInterval.start){
                res.add(i);
            }else if(i.start <= newInterval.end && newInterval.start <= i.end){
                newInterval=new Interval(Math.min(i.start, newInterval.start), Math.max(i.end, newInterval.end));
            }else if(i.start>newInterval.end){
                res.add(newInterval);
                newInterval=i;
            }
        }
        res.add(newInterval);
        return res;
    }
}

