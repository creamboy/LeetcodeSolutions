127.	Word Ladder
Given two words (beginWord and endWord), and a dictionary, find the length of shortest transformation sequence from beginWord to endWord, such that:1.Only one letter can be changed at a time2.Each intermediate word must exist in the dictionary



public class Solution {
    public int ladderLength(String beginWord, String endWord, Set<String> wordDict) {
        LinkedList<String> queue=new LinkedList<String>();
        LinkedList<Integer> dist=new LinkedList<Integer>();
        queue.add(beginWord);
        dist.add(1);
        while(!queue.isEmpty()){
            String curr=queue.pop();
            Integer currDist=dist.pop();
            if(curr.equals(endWord)){
                return currDist;
            }
            for(int i=0; i<curr.length(); i++){
                char[] currC=curr.toCharArray();
                for(char c='a' ; c<='z'; c++){
                    currC[i]=c;
                    String newWord=new String(currC);
                    if(wordDict.contains(newWord)){
                        queue.add(newWord);
                        dist.add(currDist+1);
                        wordDict.remove(newWord);
                    }
                }
            }
        }
        return 0;
    }
}
