47.	Permutations II
Given a collection of numbers that might contain duplicates, return all possible unique permutations. For example, [1,1,2] have the following unique permutations: [1,1,2], [1,2,1], and [2,1,1].

 Time ~ O(N!), Extra Space ~ O(N)
Must sort first (因为仅判断相邻是否 duplicates)!
用一个 HashSet 记录访问过的元素 index，因为有duplicates，不能用 list.contains(num[i]) 判断是否该元素已经被加入排列。
Backtracking is needed here (since DFS exceeds time limit!)
剪枝的条件: 发现相同元素，且前一个相同元素没有用过（如果用过则是一个新排列）。
!vistied.contains(i - 1) && num[i - 1] == num[i]
No need to check duplicate lists here, since the pruning already takes out the duplicates.

public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res=new ArrayList<List<Integer>>();
        boolean[] isUsed = new boolean[nums.length];
        if(nums.length==0) return res;
        helper(res, nums, new ArrayList<Integer>(), 0, isUsed);
        return res;
    }
    public void helper(List<List<Integer>> res, int[] nums, List<Integer> item,int pos, boolean[] isUsed){
        if(pos==nums.length){
            res.add(new ArrayList<Integer>(item));
			return;
        }
        for(int i=0;i<nums.length;i++){
            if(i>0 && nums[i] == nums[i-1] && isUsed[i-1] ==false)  
                continue; 
            if (!isUsed[i]){
                item.add(nums[i]);
                isUsed[i] = true;
                helper(res, nums, item, pos+1, isUsed);
                isUsed[i] = false;
                item.remove(item.size() - 1);
            }
            
        }
    }
}
