229 Majority Element II
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. The algorithm should run in linear time and in O(1) space.
Hint: How many majority elements could it possibly have?

Solution

Time ~ O(N), Space ~ O(1)
Modify Moore's voting algorithm: use two variable num1 and num2 (since there are at most two possible majority elements), and two counter count1 and count2; check if num1 and num2 is the one-third majority in the end.

public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> list = new ArrayList<>();
        int n = nums.length;
        if (n == 0) return list;
        int num1 = 0, num2 = 0;
        int count1 = 0, count2 = 0;
        for (int i = 0; i < n; i++) {
            int val = nums[i];
            if (count1 == 0) {
                num1 = val;
                count1 = 1;
            } else if (count2 == 0 && num1 != val) {
                num2 = val;
                count2 = 1;
            } else if (num1 == val) {
                count1++;
            } else if (num2 == val) {
                count2++;
            } else /* if (num1 != val && num2 != val) */ {
                count1--;
                count2--;
            }
        }
        if (isOneThirdMajority(num1, nums)) list.add(num1);
        if (num1 != num2 && isOneThirdMajority(num2, nums)) list.add(num2);
        return list;
        }
    private boolean isOneThirdMajority(int val, int[] nums) {
        int n = nums.length;
        int count = 0;
        for (int i = 0; i < n; i++)
            if (nums[i] == val) count++;
        if (count > n / 3)  return true;
        else                return false;
    }
}