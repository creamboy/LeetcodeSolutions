22.	Generate Parentheses
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. For example, given n = 3, a solution set is: "((()))", "(()())", "(())()", "()(())", "()()()"

Solution
DFS: Time ~ O(N!), Space ~ O(N)
递归中记录左右括号的数量分别为 left 和 right，有三种情况：
如果 left == n，表明只加右括号至 right == n 即可；
如果 left <  right，表明不成立；
如果上述情况皆不满足，则可以加 '(' 也可以加 ')'，注意在试完加 '(' 后再试加 ')' 前，要将之前的加入的括号都删除（用一个 int 记住加 '(' 的位置）。
注意：因为有第二种情况限制，但 right == left 时只加 '('，所以不会出现 right > left 的情况。

public class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res=new ArrayList<String>();
        helper(n ,0, 0, "", res);
        return res;
    }
    public void helper(int n, int left, int right, String s, List<String> res){
        if(left<right){
            return;
        }
        if(left==n&&right==n){
            res.add(s);
            return;
        }
        if(left==n){
            helper(n, left, right+1, s+")", res);
            return;
        }
        helper(n, left+1, right, s+"(", res);
        helper(n, left, right+1, s+")", res);
        
    }
}
