72.	Edit Distance
Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.) You have the following 3 operations permitted on a word: a) Insert a character b) Delete a character c) Replace a character

Let d(i, j) be distance between str1 (len = i) and str2 (len = j)
if min{i, j} = 0, d(i, j) = max{i, j}
else d(i, j) = min{ d(i - 1, j) + 1,  // add last char in str1
                          d(i, j - 1) + 1,  // add last char in str2
                          d(i - 1, j - 1) + (str1[i] == str2[j]) ? 0 : 1 // replace the last char in str1 with that in str2 when str1[i] != str2[j] }
注：不需要分别考虑 insert, delete, replace 三种情况。

public class Solution {
    public int minDistance(String word1, String word2) {
        int m=word1.length();
        int n=word2.length();
        int[][] res=new int[n+1][m+1];
        for(int i=0; i<=m; i++){
            res[0][i]=i;
        }
        for(int j=0; j<=n; j++){
            res[j][0]=j;
        }
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                char c1=word1.charAt(j-1);
                char c2=word2.charAt(i-1);
                if(c1==c2){
                    res[i][j]=res[i-1][j-1];
                }else{
                    res[i][j]=Math.min(res[i-1][j-1], Math.min(res[i-1][j], res[i][j-1]))+1;
                }
            }
        }
        return res[n][m];
    }
}
