174 Dungeon Game
Write a function to determine the knight's minimum initial health so that he is able to rescue the princess.

For example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT-> RIGHT -> DOWN -> DOWN.

-2 (K)	-3	3
-5	-10	1
10	30	-5 (P)


注意：1) 武士血不能为0  2) 有些房间可以加血 (grid[i][j] > 0)

1. 2-d DP: Time ~ O(M*N), Space ~ O(M*N)
Let d(i, j) be the min health to enter grid[i, j] and reach grid[M - 1][N - 1].
d(i, j) = max{ min{d(i + 1, j), d(i, j + 1)} - grid[i][j], 1 }
underline part: min health to proceed after taking possession of grid[i][j] (two cases: go down or go right)
max{x, 1}: guarantee health >= 1
Return d(0, 0).
Use bottom-up approach.

public class Solution {
    public int calculateMinimumHP(int[][] dungeon) {
        int m = dungeon.length;
        int n = dungeon[0].length;

        int[][] d = new int[m][n];  // min health to enter dungeon(i, j)
        for (int i = m - 1; i >= 0; i--)
            for (int j = n - 1; j >= 0; j--) {
                if (i == m - 1 && j == n - 1)
                    d[i][j] = Math.max(1 - dungeon[i][j], 1);
                else if (i == m - 1)    // go right
                    d[i][j] = Math.max(d[i][j + 1] - dungeon[i][j], 1);
                else if (j == n - 1)    // go down
                    d[i][j] = Math.max(d[i + 1][j] - dungeon[i][j], 1);
                else                    // go down or right
                    d[i][j] = Math.max(Math.min(d[i + 1][j], d[i][j + 1]) - dungeon[i][j], 1);
            }
        return d[0][0];
    }
}
