230 Kth Smallest Element in a BST
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Binary Search: Time ~ O(NlogN), Space ~ O(1)
Binary search based on the size of each left node, where the size is the number of subtree nodes (including the root itself):
if n + 1 == k, the kth node is the root;
if n + 1 < k, the kth node is in the right subtree;
if n + 1 > k, the kth node is in the left subtree.
Binary search takes O(logN); obtaining size takes O(N).

public class Solution {
    public int kthSmallest(TreeNode root, int k) {
        int n = size(root.left);
        if (n + 1 == k) {
            return root.val;
        } else if (n + 1 < k) {
            return kthSmallest(root.right, k - n - 1);
        } else /* if (n + 1 > k) */ {
            return kthSmallest(root.left, k);
        }
    }
    private int size(TreeNode x) {
        if (x == null)  return 0;
        return size(x.left) + size(x.right) + 1;
    }
}