33.	Search in Rotated Sorted Array
Suppose a sorted array is rotated at some pivot unknown to you beforehand. (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2). You are given a target value to search. If found in the array return its index, otherwise return -1. You may assume no duplicate exists in the array.

Binary Search: Time ~ O(logN), Space ~ O(1)
1. 循环条件只用 lo < hi，此处不能剔除 unrotated case。
2. 三种情况：
num[mid] > num[lo], num[mid] < num[hi]：unrotated array
num[mid] < num[lo], num[mid] < num[hi]：rotated array，mid 和 hi 在一侧
上面两种情况，num[mid .. hi] 为升序，判断 target 在此区间中，则移动 lo，否则移动 hi；
num[mid] > num[lo], num[mid] > num[hi]：rotated array，mid 和 lo 在一侧
第三种情况下，num[lo .. mid] 为升序，判断 target 在此区间中，则移动 hi，否则移动 lo。
3. 最后需判断 num[lo] 是否为 target，若不等则表明未找到，返回 -1。


public class Solution {
    public int search(int[] nums, int target) {
        return helper(nums, target, 0, nums.length-1);
    }
    public int helper(int[] nums, int target, int low, int high){
        int mid=(low+high)/2;
        if(nums[mid]==target) return mid;
        if(low>high) return -1;
        if(nums[low]<=nums[mid]){
            if(target>=nums[low] && target< nums[mid]){
                return helper(nums, target, low, mid-1);
            }else{
                return helper(nums, target, mid+1, high);
            }
        }else if(nums[mid]<=nums[high]){
            if(target>nums[mid] && target<=nums[high]){
                return helper(nums, target, mid+1, high);
            }else{
                return helper(nums, target, low, mid-1);
            }
        }
        return -1;
        
    }
}
