131.	Palindrome Partitioning
Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

1. DFS: Time ~ O(2^N)
private List<List<String>> listSet = new ArrayList<List<String>>();

public List<List<String>> partition(String s) {
    dfsPartition(s, 0, new ArrayList<String>());
    return listSet;
}

private void dfsPartition(String s, int start, ArrayList<String> list) {
    if (start >= s.length())
        listSet.add(new ArrayList<String>(list));

    for (int i = start; i < s.length(); i++) {
        if (isPalindrome(s, start, i)) {
            list.add(s.substring(start, i + 1));
            dfsPartition(s, i + 1, list);
            list.remove(list.size() - 1);
        }
    }

}

private boolean isPalindrome(String s, int start, int end) {
    int l = start, r = end;
    while (l < r) {
        if (s.charAt(l) != s.charAt(r)) return false;
        l++;
        r--;
    }
    return true;
}


2.
public class Solution {
    public List<List<String>> partition(String s) {
        int len=s.length();
        List<List<String>>[] res = new List[len + 1];
        res[0]=new ArrayList<List<String>>();
        res[0].add(new ArrayList<String>());
        boolean[][] pair=new boolean[len][len];
        for(int i=0; i<len; i++){
            res[i+1] = new ArrayList<List<String>>();
            char c = s.charAt(i);
            for(int j=0; j<=i; j++){
                if(j == i)
                    pair[j][i] = true;
                else{
                    if(s.charAt(j) != c)
                        continue;
                    if(j == i-1)
                        pair[j][i] = true;
                    else
                        pair[j][i] = pair[j+1][i-1];
                }
                if(pair[j][i]){
                    String str = s.substring(j, i+1);
                    for(List<String> r : res[j]){
                        List<String> ri = new ArrayList<String>(r);
                        ri.add(str);
                        res[i+1].add(ri);
                    }
                }
            }
        }
        return res[len];
    }
}
