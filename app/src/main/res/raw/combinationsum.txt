39.	Combination Sum
Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T. The same repeated number may be chosen from C unlimited number of times. Note: All numbers (including target) will be positive integers. Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak). The solution set must not contain duplicate combinations.


public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        helper(res, new ArrayList<Integer>(), candidates, target, 0);
        return res;
    }
    public void helper(List<List<Integer>> res, List<Integer> list, int[] candidates, int target, int pos){
        if(target>0){
            for(int i=pos; i<candidates.length; i++){
                if(i>pos&&candidates[i]==candidates[i-1])continue;
                list.add(candidates[i]);
                helper(res, list, candidates, target-candidates[i], i);
                list.remove(list.size()-1);
            }
        }else if(target==0){
            res.add(new ArrayList<Integer>(list));
        }
    }
}
