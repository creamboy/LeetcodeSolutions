81.	Search in Rotated Sorted Array II
Follow up for "Search in Rotated Sorted Array": What if duplicates are allowed? Would this affect the run-time complexity? How and why? Write a function to determine if a given target is in the array.

Binary Search: Time ~ O(logN) worst case ~ O(N), Space ~ O(1)
Slight modifications:
除上述的两种情况：
num[mid] < num[hi]，若 target 在 num[mid .. hi] 中，则移动 lo，否则移动 hi；
num[mid] > num[hi]，若 target 在 num[lo .. mid] 中，则移动 hi，否则移动 lo；
再增加另一种情况：
num[mid] == num[hi]，将 hi 后移一位（不能将 hi = mid，因为会漏掉 mid 到 hi 中大的元素，比如 [1, 1, 3, 1], target = 3）。

public class Solution {
    public boolean search(int[] nums, int target) {
        return helper(nums, target, 0, nums.length-1);
    }
    public boolean helper(int[] nums, int target, int low, int high){
        if(low>high) return false;
        int mid=(low+high)/2;
        if(nums[mid]==target) return true;
        if(nums[low]<nums[mid]){
            if(target>=nums[low] && target< nums[mid]){
                return helper(nums, target, low, mid-1);
            }else{
                return helper(nums, target, mid+1, high);
            }
        }else if(nums[mid]<nums[low]){
            if(target>nums[mid] && target<=nums[high]){
                return helper(nums, target, mid+1, high);
            }else{
                return helper(nums, target, low, mid-1);
            }
        }else{
            return helper(nums, target, low+1, high); //new
        }
    }
}
