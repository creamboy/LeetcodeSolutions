162. Find Peak Element
A peak element is an element that is greater than its neighbors.
Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.
The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.
You may imagine that num[-1] = num[n] = -∞.
For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.


Binary Search: Time ~ O(logN), Space ~ O(1)
已知 array 中没有重复元素，所以有四种情况，其中只有 (a) 是 peak：
a)            b)  *        c)         *   d)
     *                 *            *          *     *
*       *                *      *                 *
如果 mid 小于 right (c, d)，则 mid 的右侧一定有 peak；
如果 mid 小于 left (b, d)，则 mid 的左侧一定有 peak；
除上述两种情况外即为 (a)，则 mid 为 peak。
注意：循环条件中必须是 lo <= hi 而不是 lo < hi，因为当 lo = hi = mid 时仍需判断该点是否为 peak。

public class Solution {
    public int findPeakElement(int[] nums) {
        int low = 0, high = nums.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (mid < nums.length - 1 &&  nums[mid] < nums[mid + 1])   low = mid + 1;
            else if (mid > 0 && nums[mid] < nums[mid - 1])            high = mid;
            else return mid;
        }
        return -1;  // peak doesn't exist
    }
}