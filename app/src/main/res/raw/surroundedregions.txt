130.	Surrounded Regions
Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.A region is captured by flipping all 'O's into 'X's in that surrounded region.

Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.
A region is captured by flipping all 'O's into 'X's in that surrounded region.
For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:
X X X X
X X X X
X X X X
X O X X

Solution
1. BFS: Time ~ O(N^2), Space ~ O(N^2)
对四周的边界的每一个点做 BFS：用一个 Queue，将访问的格子为 O 的变成 p（注意必须区别与 X），然后放入 Queue 中，然后对其上、下、左、右做同样的检查，循环直至 Queue 为空，这样可以从边界的某一点找到所有连续的 O 并变成 #。
现在剩下的 O 则是中间被包围的部分，将其全部变为 X。
再将原先的 p 恢复成 O 即可。

public class Solution {
    private List<Integer> list=new ArrayList<Integer>();
    public void solve(char[][] board) {
        if(board.length==0) return;
        if(board[0].length==0) return;
        int row=board.length;
        int col=board[0].length;
        for(int j=0; j<col; j++){
            if(board[0][j]=='O') helper(board, 0, j);
        }
        for(int j=0; j<col; j++){
            if(board[row-1][j]=='O') helper(board, row-1, j);
        }
        for(int i=0; i<row; i++){
            if(board[i][0]=='O') helper(board, i, 0);
        }
        for(int i=0; i<row; i++){
            if(board[i][col-1]=='O') helper(board, i, col-1);
        }
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(board[i][j]=='O')board[i][j]='X';
                if(board[i][j]=='P')board[i][j]='O';
            }
        }
    }
    private void fill(char[][] board, int i, int j){
        int row=board.length;
        int col=board[0].length;
        if(i<0||i>=row||j<0||j>=col||board[i][j]!='O') return;
        list.add(i*col+j);
        board[i][j]='P';
    }
    private void helper(char[][] board, int i, int j){
        int col=board[0].length;
        fill(board, i, j);
        while(!list.isEmpty()){
            int cur=list.remove(list.size()-1);
            int x=cur/col;
            int y=cur%col;
            
            fill(board, x-1, y);
            fill(board, x+1, y);
            fill(board, x, y-1);
            fill(board, x, y+1);
        }
    }
}

