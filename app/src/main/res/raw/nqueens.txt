51.	N-Queens
The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.
For example,
There exist two distinct solutions to the 4-queens puzzle:
[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]



public class Solution {
    public List<String[]> solveNQueens(int n) {
        List<String []> res=new ArrayList<String []>();
        int[] item=new int[n];
        helper(res, item, n, 0);
        return res;
    }
    public void helper(List<String []> res, int[] item, int n, int pos){
        if(pos==n){
            String[] ans=new String[n];
            for(int i=0; i<n; i++){
                String row=new String();
                for(int j=0; j<n; j++){
                    if(j==item[i]) row+="Q";
                    else row+=".";
                }
                ans[i]=row;
            }
            res.add(ans);
        }else{
            for(int i=0; i<n; i++){
                item[pos]=i;
                if(isValid(item, pos)){
                    helper(res, item, n, pos+1);
                }
            }
        }
    }
    public boolean isValid(int[] item, int pos){
        for(int i=0; i<pos; i++){
            if(item[i]==item[pos] || Math.abs(item[i]-item[pos])==pos-i) return false;
        }
        return true;
    }
}
