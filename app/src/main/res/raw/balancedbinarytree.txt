110.	Balanced Binary Tree
Given a binary tree, determine if it is height-balanced. For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Bottom-up recursion: Time ~ O(N)
仍然计算每个node到底部的maxDepth，但当左右子树的maxDepth相差超过1，则返回 -1（unbalanced），这样可迅速结束递归。

public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root==null) return true;
        if(helper(root)==-1) return false;
        return true;
    }
    public int helper(TreeNode root){
        if(root==null) return 0;
        int left=helper(root.left);
        int right=helper(root.right);
        if(Math.abs(left-right)>1) return -1;
        if(left==-1 || right==-1) return -1;
        return Math.max(left, right)+1;
    }
}     
