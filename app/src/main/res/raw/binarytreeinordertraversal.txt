94.	Binary Tree Inorder Traversal
Given a binary tree, return the inorder traversal of its nodes' values. For example: Given binary tree {1,#,2,3}, 1 \ 2 / 3 return [1,3,2].

1.
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res=new ArrayList<Integer>();
        Stack<TreeNode> stack=new Stack<TreeNode>();
        TreeNode temp=root;
        while(!stack.isEmpty() || temp!=null){
            if(temp!=null){
                stack.push(temp);
                temp=temp.left;
            }else{
                temp=stack.pop();
                res.add(temp.val);
                temp=temp.right;
            }
        }
        return res;
    }
}

2. Morris Inorder Traversal: Time ~ O(N), Space ~ O(1)
改变Tree的结构，将node下最右节点连接node的parent，这样可以自动返回上层。
参见：wikipedia
    // Morris inorder traversal: Space ~ O(1)
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        TreeNode curr = root;

        while (curr != null) {
            if (curr.left != null) {        // if curr has left children
                TreeNode prev = curr.left;
                while (prev.right != null && prev.right != curr) {
                    prev = prev.right;      // find the rightmost node in curr's left subtree
                }
                if (prev.right == null) {   // set right to successor, and go to left
                    prev.right = curr;
                    curr = curr.left;
                } else {                    // visit and revert the change, and go to right
                    prev.right = null;
                    list.add(curr.val);
                    curr = curr.right;
                }
            } else {                        // if curr doesn't have left child, go to right
                list.add(curr.val);
                curr = curr.right;
            }
        }
        return list;
    }