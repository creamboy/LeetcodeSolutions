235 Lowest Common Ancestor of a Binary Search Tree
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

Solution
DFS: Time ~ O(logN), Space ~ O(logN)
Going from top down to find p and q, the LCA is the node when split happens.
If root.val is larger than both p.val and q.val, then go left;
If root.val is smaller than both p.val and q.val, then go right;
otherwise, there is a split.

public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root.val < p.val && root.val < q.val)  return lowestCommonAncestor(root.right, p, q);
        else if (root.val > p.val && root.val > q.val)  return lowestCommonAncestor(root.left, p, q);
        else return root;
    }
}