200 Number if Islands
Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

BFS: Time ~ O(MN), Space ~ O(MN)

public class Solution {
    public int numIslands(char[][] grid) {
    int m = grid.length;
    if (m == 0) return 0;
    int n = grid[0].length;
    int count = 0;
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == '1') {
                bfs(grid, i, j);
                count++;
            }
        }
    // recover the grid
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            if (grid[i][j] == '#')
                grid[i][j] = '1';
    return count;
    }

    private void bfs(char[][] grid, int i, int j) {
        Queue<Integer> q = new LinkedList<>();
        visit(grid, i, j, q);
        while (!q.isEmpty()) {
            int pos = q.poll();
            int x = pos / grid[0].length;
            int y = pos % grid[0].length;
            visit(grid, x - 1, y, q);
            visit(grid, x + 1, y, q);
            visit(grid, x, y - 1, q);
            visit(grid, x, y + 1, q);
        }
    }

    private void visit(char[][] grid, int i, int j, Queue<Integer> q) {
        if (i < 0 || i > grid.length - 1 || j < 0 || j > grid[0].length - 1 || grid[i][j] != '1') return;
        grid[i][j] = '#';
        q.add(i * grid[0].length + j);
    }
}