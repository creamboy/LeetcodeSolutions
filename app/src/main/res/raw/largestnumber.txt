179 Largest Number
Given a list of non negative integers, arrange them such that they form the largest number.
For example, given [3, 30, 34, 5, 9], the largest formed number is 9534330.
Note: The result may be very large, so you need to return a string instead of an integer.

Solution

Time ~ O(NlogN), Space ~ O(N)
Use Arrays.sort() and define a Comparator with the compare(a, b) method:
given two integer a and b,
if ab < ba, return -1;
if ab > ba, return 1;
if ab == ba, return 0.
After sort, append the strings from right to left to form a String, and delete leading zeros.
注意：
两个Integer append 后可能会 overload，所以必须不能直接比较 ab 和 ba 的值，要将两个 String 从高位到低位依次比较。
Comparator 用于 Integer 时，使用 Arrays.sort() 会有错，因为 num[i] 是 int 不是 Integer。
要记得删除开头的 0

public class Solution {
    public String largestNumber(int[] nums) {
        int n = nums.length;
        String[] numStr = new String[n];
        for (int i = 0; i < n; i++){
            numStr[i] = Integer.toString(nums[i]);
        }
        Arrays.sort(numStr, comparator);
        StringBuilder str = new StringBuilder();
        // append numStr from right to left
        for (int i = n - 1; i >= 0; i--){
           str.append(numStr[i]);
        }
        // delete leading zeros
        int start = 0;
        while (start < str.length() - 1 && str.charAt(start) == '0') {
            start++;
        }
        return str.substring(start);
    }
    public Comparator<String> comparator = new Comparator<String>() {
    public int compare(String a, String b) {
        String ab = a + b, ba = b + a;
        for (int i = 0; i < ab.length(); i++) {
            char c1 = ab.charAt(i), c2 = ba.charAt(i);
            if (c1 < c2)        return -1;
            else if (c1 > c2)   return 1;
        }
        return 0;
    }
};

}