155.	Min Stack
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.• push(x) -- Push element x onto stack.• pop() -- Removes the element on top of the stack.• top() -- Get the top element.• getMin() -- Retrieve the minimum element in the stack.

1. use one stack
class MinStack {
    int min=Integer.MAX_VALUE;
    Stack<Integer> stack = new Stack<Integer>();
    public void push(int x) {
        if(x <= min){          
            stack.push(min);
            min=x;
        }
        stack.push(x);
    }

    public void pop() {
        if(stack.peek()==min) {
            stack.pop();
            min=stack.peek();
            stack.pop();
        }else{
            stack.pop();
        }
        if(stack.empty()){
            min=Integer.MAX_VALUE;
        }

    }

    public int top() {
        return stack.peek();

    }

    public int getMin() {
        return min;
    }
}

2 use 2 stacks
Stack: Time ~ O(1), Space ~ O(N)
Need an extra stack minStack to realize getMin(): the minStack always keep the min element of the current stack on its top.
push(): Every time a new integer is pushed into the stack, compare it with the top element in minStack. If it's smaller, then also push it into the minStack.
pop(): When an element pops out, we need to check if it's the min element. If so, we need to pop out minStack also. Don't use "==" to compare the values here!

private Stack<Integer> stack = new Stack<>();
private Stack<Integer> minStack = new Stack<>();

public void push(int x) {
    stack.push(x);
    if (minStack.isEmpty() || x <= minStack.peek())    minStack.push(x);
}

public void pop() {
    if (stack.pop().equals(minStack.peek()))    minStack.pop();
}

public int top() {
    return stack.peek();
}

public int getMin() {
    return minStack.peek();
}

3 do not use stack

class MinStack {
    int min=Integer.MAX_VALUE;
    ArrayList<Integer> list=new ArrayList<Integer>();

public void push(int x) {
    list.add(x);
    if(x<min){
        min=x;
    }
}

public void pop() {
    if(list.isEmpty())
        return;
    if(list.get(list.size()-1)==min){
        min=Integer.MAX_VALUE;
        for(int i=0;i<list.size()-1;i++){
            if(list.get(i)<min)
                min=list.get(i);
        }
    }
    list.remove(list.size()-1);
}

public int top() {
    return list.get(list.size()-1);
}

public int getMin() {
    return min;
}

}