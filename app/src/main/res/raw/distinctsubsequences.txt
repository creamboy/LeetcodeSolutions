115.	Distinct Subsequences
Given a string S and a string T, count the number of distinct subsequences of T in S.A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).Here is an example:S = "rabbbit", T = "rabbit"Return 3.


1. 2D
public class Solution {
    public int numDistinct(String s, String t) {
        int[][] res=new int[t.length()+1][s.length()+1];
        for(int j=0; j<=s.length(); j++){
            res[0][j]=1;
        }
        for(int i=0; i<t.length(); i++){
            for(int j=0; j<s.length(); j++){
                if(t.charAt(i)==s.charAt(j)){
                    res[i+1][j+1]=res[i][j]+res[i+1][j];
                }else{
                    res[i+1][j+1]=res[i+1][j];
                }
            }
        }
        return res[t.length()][s.length()];
    }
}


2. 1-d DP（滚动数组）: Time ~ O(ST), Space ~ O(T)
Fill up table：j 的方向 forward

public class Solution {
    public int numDistinct(String s, String t) {
        int m = s.length(), n = t.length();
        int[] dp = new int[n + 1];
        dp[0] = 1;
        for (int i = 1; i <= m; i++) {
            int prev = dp[0];
            for (int j = 1; j <= Math.min(i, n); j++) {
                int curr = dp[j];
                dp[j] += (s.charAt(i - 1) == t.charAt(j - 1)) ? prev : 0;
                prev = curr;
            }
        }
        return dp[n];
    }
}