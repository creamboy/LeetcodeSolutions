31.	Next Permutation
implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers. If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order). The replacement must be in-place, do not allocate extra memory. Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column. 1,2,3 → 1,3,2 3,2,1 → 1,2,3 1,1,5 → 1,5,1

Time ~ O(2N), Space ~ O(1)
这道题是全排列中的一步，即给定一个排列，求下一个排列是什么。
方法：
从右向左扫，找到右端最长的降序列（记录该序列的开头为 num[curr]，则 num[curr - 1] 为分割数，即在 curr - 1 和 curr 间分割）；
反该转序列成升序；
在反转后的序列中从左至右找第一个大于分割数的元素，并与分割数交换位置。

public class Solution {
    public void nextPermutation(int[] num) {
        if(num.length<=1) return;
        for(int i=num.length-2;i>=0;i--){
            for(int j=num.length-1; j>i;j--){
                if(num[j]>num[i]){
                    int temp=num[i];
                    num[i]=num[j];
                    num[j]=temp;
                    Arrays.sort(num, i+1, num.length);
                    return;
                }
            }
        }
        Arrays.sort(num);
        return;
    }
}
