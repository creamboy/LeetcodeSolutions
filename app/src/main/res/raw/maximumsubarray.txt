53.	Maximum Subarray
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.
For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6.

Solution
1-d DP: Time ~ O(N), Space ~ O(1)
Let d(i) be the largest sum of the subarray ending at A[i].
d(i) = Math.max(d(i - 1) + A[i], A[i])
Use sum to store d(i) at each i, use max to store the largest d(i) over the array.

public class Solution {
    public int maxSubArray(int[] A) {
        int n = A.length;
        int[] dp = new int[n];
        dp[0] = A[0];
        int max = dp[0];
        for(int i = 1; i < n; i++){
            dp[i] = A[i] + (dp[i - 1] > 0 ? dp[i - 1] : 0);
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}
